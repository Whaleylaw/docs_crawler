version: '3.8'

services:
  # Main Application
  crawl4ai-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    container_name: crawl4ai-standalone
    restart: unless-stopped
    environment:
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      
      # Streamlit Configuration
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      
      # API Configuration
      - API_SERVER_PORT=8000
      - API_SERVER_HOST=0.0.0.0
      
      # Database Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      
      # AI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      - OPENAI_CHAT_MODEL=${OPENAI_CHAT_MODEL:-gpt-3.5-turbo}
      
      # Performance Settings
      - MAX_CONCURRENT=${MAX_CONCURRENT:-10}
      - CHUNK_SIZE=${CHUNK_SIZE:-4000}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-200}
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      
      # Monitoring
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
      - "${API_PORT:-8000}:8000"
    
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_config:/app/config
      - app_uploads:/app/uploads
    
    depends_on:
      - redis
      - postgres
    
    networks:
      - crawl4ai-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for Caching and Session Management
  redis:
    image: redis:7.2-alpine
    container_name: crawl4ai-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - crawl4ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for Local Development (Optional - use if not using Supabase)
  postgres:
    image: postgres:16-alpine
    container_name: crawl4ai-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-crawl4ai}
      - POSTGRES_USER=${POSTGRES_USER:-crawl4ai}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-crawl4ai_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - crawl4ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crawl4ai} -d ${POSTGRES_DB:-crawl4ai}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: crawl4ai-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - crawl4ai-app
    networks:
      - crawl4ai-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Grafana (Optional)
  grafana:
    image: grafana/grafana:10.3.0
    container_name: crawl4ai-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - crawl4ai-network
    profiles:
      - monitoring

  # Prometheus for Metrics Collection (Optional)
  prometheus:
    image: prom/prometheus:v2.49.0
    container_name: crawl4ai-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.route-prefix=/'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - crawl4ai-network
    profiles:
      - monitoring

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  app_config:
    driver: local
  app_uploads:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  crawl4ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16